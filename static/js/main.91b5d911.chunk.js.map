{"version":3,"sources":["components/ThemeLink.js","components/supportedLanguages.js","components/useOuterClickNotifier.js","components/LanguageLink.js","components/MoreLink.js","components/Nav.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["LinkStyled","styled","a","injectIntl","props","useState","isDarkMode","setDarkMode","intl","onClick","switchTheme","title","formatMessage","id","icon","supportedLanguages","useOuterClickNotifier","onOuterClick","innerRef","useEffect","current","document","addEventListener","handleClick","removeEventListener","e","contains","target","Dropdown","div","theme","bg","gray2","showLanguages","setShowLanguages","getLanguageTitle","locale","useRef","ref","size","className","Object","keys","map","key","i","setLanguage","console","log","NavStyled","nav","gray1","Link","Nav","to","this","Component","HeaderStyle","header","ffAnonymous","Header","href","library","add","faCode","faMoon","faSun","faChevronDown","GlobalStyle","createGlobalStyle","ffMontserrat","AppContainer","App","IntlApp","messages","setMessages","setTheme","setLocale","language","navigator","fetch","then","json","th","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91b5d911.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { injectIntl } from \"react-intl\";\n\nconst LinkStyled = styled.a`\n  cursor: pointer;\n  transition: display ease .3s;\n  margin-left: 12px;\n`;\n\nconst ThemeLink = (props) => {\n\n  const [isDarkMode, setDarkMode] = useState(true);\n\n  const handleClick = () => {\n    setDarkMode(!isDarkMode);\n    props.switchTheme(isDarkMode ? 'dark' : 'main');\n  }\n\n  const { intl } = props;\n  return (\n    <LinkStyled onClick={handleClick} title={isDarkMode ? intl.formatMessage({ id: 'dark-mode' }) : intl.formatMessage({ id: 'light-mode' })}>\n      <FontAwesomeIcon icon={isDarkMode ? 'moon' : 'sun'} />\n    </LinkStyled>\n  )\n}\n\nexport default injectIntl(ThemeLink);\n","const supportedLanguages = { 'pt': 'pt', 'en': 'en', 'fr': 'fr' };\n\nexport default supportedLanguages;","import { useEffect } from \"react\";\n\nconst useOuterClickNotifier = (onOuterClick, innerRef) => {\n  useEffect(\n    () => {\n      if (innerRef.current) {\n        document.addEventListener(\"click\", handleClick);\n      }\n\n      return () => document.removeEventListener(\"click\", handleClick);\n\n      function handleClick(e) {\n        innerRef.current && !innerRef.current.contains(e.target) && onOuterClick(e);\n      }\n    },\n    [onOuterClick, innerRef]\n  );\n}\n\nexport default useOuterClickNotifier;","import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { injectIntl } from \"react-intl\";\nimport supportedLanguages from \"./supportedLanguages\";\nimport useOuterClickNotifier from \"./useOuterClickNotifier\";\n\nconst LinkStyled = styled.a`\n  cursor: pointer;\n  margin-left: 12px;\n  text-decoration: none;\n  position: relative;\n  &:hover {\n    text-decoration: none;\n  }\n  svg {\n    margin-left: 5px;\n  }\n`;\n\nconst Dropdown = styled.div`\n  position: absolute;\n  \n  width: 42px;\n  left: -6px;\n  background-color: ${props => props.theme.bg};\n  border: 1px solid transparent;\n  border-color: ${props => props.theme.gray2};\n  padding: 0 5px;\n  max-height: 0;\n  top: 20px;\n  overflow: hidden;\n  transition: all ease-out .5s;\n  visibility: hidden;\n  \n  &.show {\n    visibility: visible;\n    max-height: 200px;\n    transition: all ease-in .5s;\n  }\n\n  div {\n    display: block;\n    padding: 4px 0;\n    border-bottom: 1px solid ${props => props.theme.gray2};\n    &:last-of-type {\n      border-bottom-color: transparent;\n    }\n  }\n`;\n\nconst LanguageLink = (props) => {\n  const [showLanguages, setShowLanguages] = useState(false);\n\n  const handleClick = () => {\n    setShowLanguages(!showLanguages);\n  }\n\n  const getLanguageTitle = (locale) => {\n    switch (locale) {\n      case 'pt':\n        return 'Português';\n      case 'en':\n        return 'English';\n      case 'fr':\n        return 'Français';\n      default:\n        break;\n    }\n  }\n\n  const { intl } = props;\n  const innerRef = useRef(null);\n\n  useOuterClickNotifier(\n    e => setShowLanguages(false),\n    innerRef\n  );\n\n  return (\n    <LinkStyled onClick={handleClick} ref={innerRef}>\n      {intl.locale}\n      <FontAwesomeIcon icon={\"chevron-down\"} size=\"xs\" />\n      <Dropdown className={showLanguages ? 'show' : ''}>\n        {Object.keys(supportedLanguages).map((key, i) => <div key={i} onClick={() => {props.setLanguage(key)}} title={getLanguageTitle(key)}>{key}</div> )}\n      </Dropdown>\n    </LinkStyled>\n  )\n}\n\nexport default injectIntl(LanguageLink);\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { injectIntl } from \"react-intl\";\n\nconst LinkStyled = styled.a`\n  cursor: pointer;\n`;\n\nconst MoreLink = (props) => {\n\n  // const [isDarkMode, setDarkMode] = useState(true);\n\n  const handleClick = () => {\n    console.log('moarrrr');\n  }\n\n  // const { intl } = props;\n  return (\n    <LinkStyled onClick={handleClick} title=\"\">\n      +\n    </LinkStyled>\n  )\n}\n\nexport default injectIntl(MoreLink);\n","import React, { Component } from \"react\";\nimport { FormattedMessage } from \"react-intl\"\nimport styled from \"styled-components\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ThemeLink  from \"./ThemeLink\";\nimport LanguageLink  from \"./LanguageLink\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport MoreLink from \"./MoreLink\";\n\nconst NavStyled = styled.nav`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  a {\n    font-size: 16px;\n    color: ${props => props.theme.gray1};\n  }\n`;\n\nconst LinkStyled = styled(Link)`\n  text-transform: lowercase;\n  margin-left: 12px;\n  &:hover {\n    text-decoration: underline;\n  } \n  &:first-of-type {\n    text-decoration: none;\n  }\n`;\n\n\nclass Nav extends Component {\n  render() {\n    return (\n      <NavStyled>\n        <MoreLink />\n        <LinkStyled to=\"/perfil\"><FormattedMessage id=\"menu-profile\" /></LinkStyled>\n        <LinkStyled to=\"/portfolio\"><FormattedMessage id=\"menu-portfolio\" /></LinkStyled>\n        <LinkStyled to=\"/contato\"><FormattedMessage id=\"menu-contact\" /></LinkStyled>\n        <LanguageLink setLanguage={this.props.setLanguage} />\n        <ThemeLink switchTheme={this.props.switchTheme} />\n      </NavStyled>\n    )\n  }\n}\n\nexport default Nav;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Nav from './Nav';\nimport { injectIntl } from \"react-intl\";\nimport styled from \"styled-components\";\n\nconst HeaderStyle = styled.header`\n  font-family: ${props => props.theme.ffAnonymous};\n\n  .header-content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      border-bottom: 1px solid ${props => props.theme.gray2};\n      padding: 10px 0;\n  }\n\n  .site-title {\n      display: flex;\n      align-items: center;\n      color: ${props => props.theme.gray1};\n      h1 {\n          font-size: 28px;\n          margin: 5px 0 5px 10px;\n      }\n  }\n`;\n\nfunction HeaderIntl(props) {\n  return (\n    <HeaderStyle>\n      <div className=\"container container-small\">\n        <div className=\"header-content\">\n          <a href=\"/\">\n            <div className=\"site-title\">\n              <FontAwesomeIcon icon=\"code\" size=\"lg\" />\n              <h1>Arthur Bandeira</h1>\n            </div>\n          </a>\n          <Nav switchTheme={props.switchTheme} setLanguage={props.setLanguage} />\n        </div>\n      </div>\n    </HeaderStyle>\n  );\n}\n\nconst Header = injectIntl(HeaderIntl);\n\nexport default Header;","import React, { useState, useEffect } from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faCode, faMoon, faSun, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport Header from './Header';\nimport supportedLanguages from './supportedLanguages';\nimport { BrowserRouter } from 'react-router-dom';\nimport { IntlProvider } from 'react-intl';\nimport styled, { ThemeProvider, createGlobalStyle } from \"styled-components\";\n\nlibrary.add(faCode, faMoon, faSun, faChevronDown)\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700|Montserrat&display=swap');\n\n  *, ::after, ::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: ${props => props.theme.ffMontserrat};\n    background-color: ${props => props.theme.bg};\n    margin: 0;\n    transition: background-color ease .3s;\n  }\n\n  .container {\n    max-width: 1200px;\n    padding: 0 15px;\n    margin: auto;\n  }\n\n  .container-small {\n    max-width: 800px;\n  }\n\n  .container-full {\n    max-width: 100%;\n  }\n\n  .row {\n    display: flex;\n    margin-left: -15px;\n    margin-right: -15px;\n  }\n\n  .col {\n    width: 100%;\n    flex-basis: 0;\n    flex-grow: 1;\n    max-width: 100%;\n    position: relative;\n    min-height: 1px;\n    padding-right: 15px;\n    padding-left: 15px;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`;\n\nconst AppContainer = styled.div`\n  text-align: center;\n`;\n\nfunction App(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n      <AppContainer>\n        <GlobalStyle />\n        <Header setLanguage={props.setLanguage} switchTheme={props.switchTheme} />\n      </AppContainer>\n    </ThemeProvider>\n  )\n}\n\nconst IntlApp = function() {\n  const [messages, setMessages] = useState(null);\n  const [theme, setTheme] = useState(null);\n  const [locale, setLocale] = useState('pt');\n\n  useEffect(() => {\n    \n    const language = navigator.language;\n    const th = 'main';\n    let locale = supportedLanguages[language] || 'pt';\n\n    fetch(`lang/${locale}.json`).then(async messages => {\n      setLocale(locale);\n      setMessages(await messages.json());\n    });\n\n    fetch(`theme/${th}.json`).then(async theme => {\n      setTheme(await theme.json());\n    });\n  }, []);\n\n  const setLanguage = async (locale) => {\n    const messages = await (await fetch(`lang/${locale}.json`)).json();\n    setLocale(locale);\n    setMessages(messages);\n  };\n\n  const switchTheme = async (th) => {\n    const theme = await (await fetch(`theme/${th}.json`)).json();\n    setTheme(theme);\n  };\n\n  if (!messages || !theme) {\n    return null;\n  }\n\n  return (\n    <IntlProvider locale={locale} messages={messages}>\n      <BrowserRouter>\n        <App setLanguage={setLanguage} theme={theme} switchTheme={switchTheme} />\n      </BrowserRouter>\n    </IntlProvider>\n  );\n}\n\nexport default IntlApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// serviceWorker.register();\n"],"sourceRoot":""}